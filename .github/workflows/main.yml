name: Build & Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
env:
  versionNumber: "1.0"
  imageName: ghcr.io/${{ github.repository }}
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Prepare Version
      id: versioning
      run: |
        v=$(date "+%Y%m%d%H%M%S")

        echo "VERSION=$v" >> $GITHUB_ENV
        echo "::set-output name=VERSION::$v"
    
    - name: compile n package docker image
      run: |
        mvn -B spring-boot:build-image \
          -Dspring-boot.build-image.imageName=$imageName:$VERSION
    - name: docker images
      run: docker images

    - name: Sonarqube analyze
      continue-on-error: true
      run: ./mvnw -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=springboot-with-helm
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.imageName}}:${{ env.VERSION }}'
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Log in to the Container registry
      if: ${{ github.ref == 'refs/heads/main' }}
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker image
      if: ${{ github.ref == 'refs/heads/main' }}
      run: |
        docker push -a ${{ env.imageName }}
        
  helm:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/main' && success() }}
    steps:
    - uses: actions/checkout@v3
    - uses: azure/setup-helm@v3
      with:
         token: ${{ secrets.GITHUB_TOKEN }}
         
    - name: Helm lint
      run: helm lint helm/ --quiet
    
    - name: Helm package
      run: |
        mkdir -p ${{github.WORKSPACE}}/helm/charts
        
        helm package helm/ -d helm/charts --version ${{needs.build.outputs.VERSION}} --app-version ${{needs.build.outputs.VERSION}} 
    
    - name: Helm registry login
      run: |
        echo ${{secrets.GITHUB_TOKEN}} | helm registry login ghcr.io/${{ github.actor }} --username ${{ github.actor }} --password-stdin
    
    - name: Helm push
      run: |
        helm push helm/charts/${{ github.event.repository.name }}-${{needs.build.outputs.VERSION}}.tgz oci://${{ env.imageName }}

# TODO move the common steps to composite flow or to a action
  dev:
    runs-on: ubuntu-latest
    needs: [build, helm]
    environment: dev
    if: ${{ github.ref == 'refs/heads/main' && success() }}
    steps:
    - uses: azure/setup-helm@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Create k8s Kind Cluster
      uses: helm/kind-action@v1.3.0
    - name: Helm registry login
      run: |
        echo ${{secrets.GITHUB_TOKEN}} | helm registry login ghcr.io/${{ github.actor }} --username ${{ github.actor }} --password-stdin
    - name: Helm template
      run: |
        echo "Deployment to ${{github.job}} cluster"
        
        helm template ${{ github.event.repository.name }} \
          --dry-run oci://${{ env.imageName }}/helm/${{ github.event.repository.name }} \
          --version ${{needs.build.outputs.VERSION}}
    - name: Helm deploy
      run: |
        helm upgrade ${{ github.event.repository.name }} \
          --install \
          --dry-run \
          oci://ghcr.io/samitkumarpatel/springboot-reactive/springboot-reactive \
          --version ${{needs.build.outputs.VERSION}}

  pp:
    runs-on: ubuntu-latest
    needs: [ build, helm, dev ]
    environment: pp
    if: ${{ github.ref == 'refs/heads/main' && success() }}
    steps:
    - uses: azure/setup-helm@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Helm registry login
      run: |
        echo ${{secrets.GITHUB_TOKEN}} | helm registry login ghcr.io/${{ github.actor }} --username ${{ github.actor }} --password-stdin
    - name: Helm deploy
      run: |
        echo "Deployment to ${{github.job}} cluster"
        
        helm template ${{ github.event.repository.name }} \
          --dry-run oci://ghcr.io/samitkumarpatel/springboot-reactive/springboot-reactive \
          --version ${{needs.build.outputs.VERSION}}
  prod:
    runs-on: ubuntu-latest
    needs: [ build, helm, dev ]
    environment: prod
    if: ${{ github.ref == 'refs/heads/main' && success() }}
    steps:
    - uses: azure/setup-helm@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Helm registry login
      run: |
        echo ${{secrets.GITHUB_TOKEN}} | helm registry login ghcr.io/${{ github.actor }} --username ${{ github.actor }} --password-stdin
    - name: Helm deploy
      run: |
        echo "Deployment to ${{github.job}} cluster"
        
        helm template ${{ github.event.repository.name }} \
          --dry-run oci://ghcr.io/samitkumarpatel/springboot-reactive/springboot-reactive \
          --version ${{needs.build.outputs.VERSION}}
